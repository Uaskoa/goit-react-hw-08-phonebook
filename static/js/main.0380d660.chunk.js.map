{"version":3,"sources":["redux/phonebook/phonebook-actions.js","redux/phonebook/phonebook-operations.js","redux/phonebook/phonebook-reducer.js","redux/phonebook/phonebook-selectors.js","components/Filter/Filter.jsx","components/ContactForm/ContactForm.jsx","components/ContactList/ContactListItem.jsx","components/ContactList/ContactList.jsx","App.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","phonebookOperations","fetchContacts","dispatch","a","get","data","addContact","name","number","contact","post","deleteContact","contactId","delete","items","createReducer","_","payload","state","filter","id","loading","combineReducers","getIsLoading","contacts","getFilter","getFilteredContacts","createSelector","allContacts","normalizedFilter","toLowerCase","includes","connect","value","onChange","e","target","type","className","ContactForm","nameInputId","shortId","generate","phoneInputId","handleNameChange","event","setState","currentTarget","handlePhoneChange","handleSubmit","preventDefault","props","onSubmit","reset","this","htmlFor","pattern","title","required","Component","ContactListItem","onDeleteContact","onClick","map","App","isLoadingContacts","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","rootReducer","phonebookReducer","store","configureStore","reducer","devTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0380d660.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\n\nexport const fetchContactsRequest = createAction(\n  \"contacts/fetchContactsRequest\"\n);\nexport const fetchContactsSuccess = createAction(\n  \"contacts/fetchContactsSuccess\"\n);\nexport const fetchContactsError = createAction(\"contacts/fetchContactsError\");\n\nexport const addContactRequest = createAction(\"contacts/addContactRequest\");\nexport const addContactSuccess = createAction(\"contacts/addContactSuccess\");\nexport const addContactError = createAction(\"contacts/addContactError\");\n\nexport const deleteContactRequest = createAction(\n  \"contacts/deleteContactRequest\"\n);\nexport const deleteContactSuccess = createAction(\n  \"contacts/deleteContactSuccess\"\n);\nexport const deleteContactError = createAction(\"contacts/deleteContactError\");\n\nexport const changeFilter = createAction(\"contacts/changeFilter\");\n","import axios from \"axios\";\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n} from \"./phonebook-actions\";\r\naxios.defaults.baseURL = \"http://localhost:3000/\";\r\n\r\nconst fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n};\r\n\r\nconst addContact = (name, number) => async (dispatch) => {\r\n  const contact = { name, number };\r\n  dispatch(addContactRequest());\r\n\r\n  try {\r\n    const { data } = await axios.post(\"/contacts\", contact);\r\n    dispatch(addContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nconst deleteContact = (contactId) => async (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  try {\r\n    await axios.delete(`/contacts/${contactId}`);\r\n    dispatch(deleteContactSuccess(contactId));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n\r\nconst phonebookOperations = { fetchContacts, addContact, deleteContact };\r\n\r\nexport default phonebookOperations;\r\n\r\n\r\n\r\n// export default { fetchContacts, addContact, deleteContact };\r\n\r\n// const fetchContacts = () => (dispatch) => {\r\n//   dispatch(fetchContactsRequest());\r\n\r\n//   axios\r\n//     .get(\"/contacts\")\r\n//     .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n//     .catch((error) => dispatch(fetchContactsError(error)));\r\n// };\r\n\r\n// const addContact = (name, number) => (dispatch) => {\r\n//   const contact = { name, number };\r\n\r\n//   dispatch(addContactRequest());\r\n\r\n//   axios\r\n//     .post(\"/contacts\", contact)\r\n//     .then(({ data }) => dispatch(addContactSuccess(data)))\r\n//     .catch((error) => dispatch(addContactError(error)));\r\n// };\r\n\r\n// const deleteContact = (contactId) => (dispatch) => {\r\n//   dispatch(deleteContactRequest());\r\n\r\n//   axios\r\n//     .delete(`/contacts/${contactId}`)\r\n//     .then(() => dispatch(deleteContactSuccess(contactId)))\r\n//     .catch((error) => dispatch(deleteContactError(error)));\r\n// };\r\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\n// import actionTypes from \"./phonebook-types\";\nimport {\n  fetchContactsRequest,\n  fetchContactsSuccess,\n  fetchContactsError,\n  addContactRequest,\n  addContactSuccess,\n  addContactError,\n  deleteContactRequest,\n  deleteContactSuccess,\n  deleteContactError,\n  changeFilter,\n} from \"./phonebook-actions\";\n\nconst items = createReducer([], {\n  [fetchContactsSuccess]: (_, { payload }) => payload,\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\n  [deleteContactSuccess]: (state, { payload }) =>\n    state.filter((contact) => contact.id !== payload),\n});\n\nconst filter = createReducer(\"\", {\n  [changeFilter]: (_, { payload }) => payload,\n});\n\nconst loading = createReducer(false, {\n  [fetchContactsRequest]: () => true,\n  [fetchContactsSuccess]: () => false,\n  [fetchContactsError]: () => false,\n  [addContactRequest]: () => true,\n  [addContactSuccess]: () => false,\n  [addContactError]: () => false,\n  [deleteContactRequest]: () => true,\n  [deleteContactSuccess]: () => false,\n  [deleteContactError]: () => false,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n  loading,\n});\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nexport const getIsLoading = (state) => state.contacts.loading;\r\nexport const getFilter = (state) => state.contacts.filter;\r\nexport const getAllContacts = (state) => state.contacts.items;\r\n\r\nexport const getFilteredContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (allContacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return allContacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n\r\n// export const getFilteredContacts = state => {\r\n//     const filter = getFilter(state);\r\n//     const allContacts = getAllContacts(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n//      return allContacts.filter(({ name }) =>\r\n//        name.toLowerCase().includes(normalizedFilter)\r\n//      );\r\n\r\n// }\r\n","import PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { changeFilter } from \"../../redux/phonebook/\";\nimport { getFilter } from \"../../redux/phonebook/phonebook-selectors\";\n\nconst Filter = ({ value, onChange }) => (\n  <>\n    <h3>Find contacts by name</h3>\n    <input\n      type=\"text\"\n      className=\"input\"\n      value={value}\n      name=\"filter\"\n      onChange={onChange}\n    ></input>\n  </>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => ({\n  value: getFilter(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onChange: (e) => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { phonebookOperations } from \"../../redux/phonebook/\";\nimport shortId from \"shortid\";\nimport \"./ContactForm.scss\";\nimport PropTypes from \"prop-types\";\n\nclass ContactForm extends Component {\n  state = {\n    name: \"\",\n    number: \"\",\n  };\n\n  nameInputId = shortId.generate();\n  phoneInputId = shortId.generate();\n\n  handleNameChange = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  handlePhoneChange = (event) => {\n    this.setState({ number: event.currentTarget.value });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: \"\", number: \"\" });\n  };\n\n  render() {\n    return (\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <label className=\"form-label\" htmlFor={this.nameInputId}>\n          <span className=\"form-label-title\">Name</span>\n          <input\n            className=\"input\"\n            type=\"text\"\n            id={this.nameInputId}\n            value={this.state.name}\n            onChange={this.handleNameChange}\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n          />\n        </label>\n        <label className=\"form-label\" htmlFor={this.phoneInputId}>\n          <span className=\"form-label-title\">Number</span>\n          <input\n            className=\"input\"\n            type=\"tel\"\n            id={this.phoneInputId}\n            value={this.state.number}\n            name=\"number\"\n            onChange={this.handlePhoneChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n          />\n          <button className=\"form-button button\" type=\"submit\">\n            Add contact\n          </button>\n        </label>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: ({ name, number }) =>\n    dispatch(phonebookOperations.addContact(name, number)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","// import { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\nimport \"./ContactList.scss\";\nconst ContactListItem = ({ id, name, number, onDeleteContact }) => (\n  <li className=\"contact-list-item\">\n    <span className=\"contact-list-name\">{name} </span>\n    <span className=\"contact-list-number\">{number} </span>\n    <button\n      type=\"button\"\n      className=\"button\"\n      onClick={() => onDeleteContact(id)}\n    >\n      Delete\n    </button>\n  </li>\n);\n\nContactListItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import { connect } from \"react-redux\";\nimport { phonebookOperations } from \"../../redux/phonebook/\";\nimport ContactListItem from \"./ContactListItem\";\nimport { getFilteredContacts } from \"../../redux/phonebook/phonebook-selectors\";\nimport \"./ContactList.scss\";\nimport PropTypes from \"prop-types\";\n\nconst ContactList = ({ contacts, onDeleteContact }) => {\n  return (\n    <ul className=\"contact-list\">\n      {contacts.map((contact) => (\n        <ContactListItem\n          id={contact.id}\n          key={contact.id}\n          name={contact.name}\n          number={contact.number}\n          onDeleteContact={onDeleteContact}\n        />\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.array.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  contacts: getFilteredContacts(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onDeleteContact: (contactId) =>\n    dispatch(phonebookOperations.deleteContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactForm from \"./components/ContactForm/ContactForm\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport { phonebookOperations } from \"./redux/phonebook/\";\nimport { getIsLoading } from \"./redux/phonebook/phonebook-selectors\";\nimport \"./styles.css\";\nimport \"./App.scss\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"phonebook\">\n            <h1>Phonebook</h1>\n            <ContactForm />\n            <h2>Contacts</h2>\n            <Filter />\n            {this.props.isLoadingContacts && <h1>Loading</h1>}\n            <ContactList />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  isLoadingContacts: getIsLoading(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  fetchContacts: () => dispatch(phonebookOperations.fetchContacts()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\n  configureStore,\n  getDefaultMiddleware,\n  combineReducers,\n} from \"@reduxjs/toolkit\";\nimport logger from \"redux-logger\";\nimport {\n  // persistStore,\n  // persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from \"redux-persist\";\nimport { phonebookReducer } from \"./phonebook/\";\n// import storage from \"redux-persist/lib/storage\";\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\n// const contactsPersistConfig = {\n//   key: \"contacts\",\n//   storage,\n//   blacklist: [\"filter\"],\n// };\n\n// const rootReducer = combineReducers({\n//   contacts: persistReducer(contactsPersistConfig, phonebookReducer),\n// });\n\nconst rootReducer = combineReducers({\n  contacts: phonebookReducer,\n});\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware,\n  devTools: true,\n  // devTools: process.env.NODE_ENV === \"development\",\n});\n\n// const persistor = persistStore(store);\n\n// const storeFunc = { store, persistor };\n\n// export default storeFunc;\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\n// import { PersistGate } from \"redux-persist/integration/react\";\n// import storeFunc from \"./redux/store\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* <PersistGate loading={null} persistor={storeFunc.persistor}> */}\n      <App />\n      {/* </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}